#!/usr/bin/env python
import sys
import os
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from dynamic_reconfigure.server import Server
from safe_footstep_planner.cfg import CalcHeightmapGradientConfig as Config

class calc_heightmap_gradient:

  def __init__(self):
    self.bridge       = CvBridge()
    self.image_pub    = rospy.Publisher("/heightmap_gradient", Image, queue_size=10)
    self.image_sub    = rospy.Subscriber("/accumulated_heightmap/output", Image, self.callback)
    self.blur_ksize   = rospy.get_param('~blur_ksize', 5) #5
    self.sobel_ksize  = rospy.get_param('~sobel_ksize', 15) # 15
    self.floor_height = rospy.get_param('~floor_height', 0.04)
    self.grad_scale   = rospy.get_param('~grad_scale', 0.000005) # 0.00002
    self.server       = Server(Config, self.config_callback)

  def config_callback(self, config, level):
    self.blur_ksize   = config.blur_ksize
    self.sobel_ksize  = config.sobel_ksize
    self.floor_height = config.floor_height
    self.grad_scale   = config.grad_scale
    if self.blur_ksize%2 == 0:
      self.blur_ksize = min(self.blur_ksize + 1, 31)
    if self.sobel_ksize%2 == 0:
      self.sobel_ksize = min(self.sobel_ksize + 1, 31)
    print("blur_ksize : {blur_ksize}".format(blur_ksize=self.blur_ksize))
    print("sobel_ksize : {sobel_ksize}".format(sobel_ksize=self.sobel_ksize))
    print("floor_height : {floor_height}".format(floor_height=self.floor_height))
    print("grad_scale : {grad_scale}".format(grad_scale=self.grad_scale))
    return config

  def callback(self, data):
    try:
      heightmap = self.bridge.imgmsg_to_cv2(data, "64FC2")
    except CvBridgeError as e:
      print(e)

    kernel    = np.ones((self.blur_ksize,self.blur_ksize),np.float32)/(self.blur_ksize**2)
    heightmap = cv2.filter2D(heightmap[:,:,0], -1, kernel)
    min_image = np.ones(heightmap.shape) * self.floor_height
    heightmap = cv2.max(heightmap, min_image)

    sobelx  = cv2.Sobel(heightmap, cv2.CV_64FC1, 1, 0, ksize=self.sobel_ksize)
    sobely  = cv2.Sobel(heightmap, cv2.CV_64FC1, 0, 1, ksize=self.sobel_ksize)
    sobelxy = np.sqrt(sobelx ** 2 + sobely ** 2)
    sobelxy = sobelxy * self.grad_scale

    # convert type to "32FC1"
    heightmap_gradient = sobelxy.astype(np.float32)
    try:
      image_msg = self.bridge.cv2_to_imgmsg(heightmap_gradient, "32FC1")
      image_msg.header = data.header
      self.image_pub.publish(image_msg)
    except CvBridgeError as e:
      print(e)

def main(args):
  rospy.init_node('calc_heightmap_gradient', anonymous=True)
  hg = calc_heightmap_gradient()
  try:
    rospy.spin()
  except KeyboardInterrupt:
    print("Shutting down")
  cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
